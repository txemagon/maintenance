#!/bin/bash
# do-in

# Oct, 2015, txema.gonz@gmail.com
# GNU GENERAL PUBLIC LICENSE, Version 2

# Executes a maneuver on a single machine

# Usage:   do-in [<user>]@<host> <maneuver> [param]*
# Example: do-in txema@192.168.1.2 execute_as jorge firefox
#
# Which will ssh -X in 192.168.1.2 as txema and will assign txema's display
# authorization to user jorge, and finally will open jorge's firefox.
#
# Check installation typing:
#          do-in localhost greet


VERSION=1.0

. /usr/share/nettenance/general.sh

display_usage () {
    cat <<EOF

    $NTT_CMD_NAME v$VERSION  -  Executes a bash file in a single remote machine.

USAGE:
    $NTT_CMD_NAME [<options>] [<user>@]<host> <maneuver_file> [<maneuver file parameters>]

    Maneuvers files can be located in system wide config (for all users) inside
    $NTT_SYS_MNVR or in a per user configuration inside
    $NTT_LOC_MNVR

OPTIONS:
    -h, --help
          Shows usage.

    -V, --version
          Displays program version.

    -s, --skip
          Skip validating the existence of the maneuver file. Which indeed is useful
          when you want to provide the command as a option. The following example shows
          who is logged in 192.168.1.3:

              $NTT_CMD_NAME -s 192.168.1.3 <(echo who)

          Note about the use of process substitution <(), which is neccesary to convert 
          output to file (descriptor).

EXAMPLE: $NTT_CMD_NAME localhost greet

EOF
}


# read the options
TEMP=`getopt -o hVs --long help,version,skip -n $NTT_CMD_NAME -- "$@"`
eval set -- "$TEMP"

# extract options and their arguments into variables.
while true ; do
    case "$1" in
        -h|--help) display_usage; exit 0 ;;
        -V|--version) display_version; exit 0;;
        -s|--skip) shift; skip=1;;
        --) shift ; break ;;
        *) echo "Internal error!" >&2; exit 1 ;;
    esac
done

ensure_args 2 $#

sshing=$1         ## Host to ssh
shift
maneuver=$1
shift

if [ -z "$skip" ]; then
  maneuver=$(look_for $maneuver MNVR)
  check_existence_of "$maneuver"
fi

maneuver="$(<$maneuver)" ## Load maneuver file as whole.

# The rest of parameters are to be passed to maneuver file
declare -i counter=0
while [[ $@ > 0 ]];
do
    ((counter++))
    # Substitute $1, $2,... in the maneuver file with current parameter ($1)
    maneuver=${maneuver//\$$counter/$1}
    echo $maneuver
    shift
done

ssh -Xt $sshing $maneuver 2> /dev/null
