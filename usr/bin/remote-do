#!/bin/bash
# remote-do

# Oct, 2015, txema.gonz@gmail.com
# GNU GENERAL PUBLIC LICENSE, Version 2

# Executes simultanousley several processes in background.
# Every command supplied feeds remote input, so there aren't
# any interacting possibilities (no remote configure).
# If you want to answer config questions use remote_install,
# instead.

# Usage:   remote-do <command_file>
# Example: remote-do shutdown

# Note: Point with userhost.lst (symbolic link) to a file
# containing the hosts.

VERSION=1.0

. /usr/share/nettenance/general.sh

display_usage () {
    cat <<EOF

    $NTT_CMD_NAME v$VERSION  -  Executes a bash file in multiple remotes machine.

USAGE:
    $NTT_CMD_NAME [<options>] <maneuver_file> [<maneuver file parameters>]

    Maneuvers files can be located in system wide config (for all users) inside
    $NTT_SYS_MNVR or in a per user configuration inside
    $NTT_LOC_MNVR

OPTIONS:
    -H, --hosts:
          -H {<user_host_file>=userhost.lst}
          User host file is a list of host names or ip's specifying target machines.
          When any file is specified, 'userhost.lst' is assumed to exist either in:

               - $NTT_LOC_MNVR
               - $NTT_SYS_MNVR

          respectively. It is a good idea to keep separate lists of IPs under ~/.nettenance/hosts
          and link ~/.nettenance/userhost.lst to point to the desired environment.

    -p, --parallel
          Show each host in a gnome-terminal tab.

    -i, --interactive
          Open ssh in a way that the user can answer questions with the terminal.

    -h, --help
          Shows usage.

    -V, --version
          Displays program version.

EXAMPLE: $NTT_CMD_NAME greet

EOF
}

hostfile=userhost.lst

mode=0
PARALLEL=1
INTERACTIVE=2

# read the options
TEMP=`getopt -o hVH:pi --long help,version,hosts:,parallel,interactive -n $NTT_CMD_NAME -- "$@"`

eval set -- "$TEMP"

# extract options and their arguments into variables.

while true ; do
    case "$1" in
        -h|--help) display_usage; exit 0 ;;
        -V|--version) display_version; exit 0;;
        -p|--parallel) mode=$(( $mode | PARALLEL )) ; shift ;;
        -i|--interactive) mode=$(( $mode | INTERACTIVE )) ; shift ;;
        -H|--hosts) case "$2" in
            "") shift 2 ;;
            *) hostfile=$2 ; shift 2 ;;
        esac ;;
        --) shift ; break ;;
        *) echo "Internal error!" >&2; exit 1 ;;
    esac
done

hostfile=$(look_for $hostfile HOST)
ensure_args 1 $#
check_existence_of $hostfile

maneuver=$(look_for $1 MNVR)


terminal="gnome-terminal"
option=" --tab -e "
s="'"
S="\""
case "$mode" in
  0|NORMAL) # do
    for ip in $(list-hosts -H $hostfile); do
       toilet -f term -F border --gay $ip
       ssh root@$ip "bash -s" < $maneuver &
    done
    ;;

  1|PARALLEL) # dop
     command=$terminal
     for ip in $(list-hosts -H $hostfile); do
       command+=$option$S
       command+="ssh root@$ip 'bash -s' < $maneuver"
       command+=$S
     done
     
     eval $command
     ;;

  2|INTERACTIVE) # install
    for ip in $(list-hosts -H $hostfile); do
        toilet -f term -F border --gay $ip
        ssh -tX root@$ip "$(<$maneuver)"
    done
    ;;

  3|PARALLEL_INTERACTIVE) # install p
    command=$terminal
    for ip in $(list-hosts -H $hostfile); do
      command+=$option$S
      command+="ssh -tX root@$ip $( < $maneuver) "
      command+=$S
    done
    
    eval $command
    ;;
esac