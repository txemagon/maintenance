#!/bin/bash
# remote_installp

# Oct, 2015, txema.gonz@gmail.com
# GNU GENERAL PUBLIC LICENSE, Version 2

# Executes simultanousley several processes
# (ONE WINDOW EACH) in background.

# Usage:   ./remote_installp <command_file>
# Example: ./remote_installp maneuvers/editor

# The example above forces you to use the install version
# since it needs to be feeded with user input for config options.

# Note: Point with userhost.lst (symbolic link) to a file
# containing the hosts

VERSION=1.0

. /usr/share/nettenance/general.sh

terminal="gnome-terminal"
option=" --tab -e "
s="'"
S="\""


display_usage () {
    cat <<EOF

    $NTT_CMD_NAME v$VERSION  -  Executes an installation file in multiple remotes machine,
	                            showing each inside a terminal tab. This command enables
								you to answer remote installation questions.

USAGE:
    $NTT_CMD_NAME [<options>] <maneuver_file> [<maneuver file parameters>]

    Maneuvers files can be located in system wide config (for all users) inside
    $NTT_SYS_MNVR or in a per user configuration inside
    $NTT_LOC_MNVR

OPTIONS:
    -f, --file:
          -f {<user_host_file>=userhost.lst}
          User host file is a list of host names or ip's specifying target machines.
          When any file is specified, 'userhost.lst' is assumed to exist either in:

               - $NTT_LOC_MNVR
               - $NTT_SYS_MNVR

          respectively. It is a good idea to keep separate lists of IPs under ~/.nettenance/hosts
          and link ~/.nettenance/userhost.lst to point to the desired environment.

    -h, --help
          Shows usage.

    -V, --version
          Displays program version.

EXAMPLE: $NTT_CMD_NAME localhost greet

EOF
}

hostfile=userhost.lst


# read the options
TEMP=`getopt -o hVf: --long help,version,file: -n $NTT_CMD_NAME -- "$@"`

eval set -- "$TEMP"

# extract options and their arguments into variables.

while true ; do
    case "$1" in
        -h|--help) display_usage; exit 0 ;;
        -V|--version) display_version; exit 0;;
        -f|--file) case "$2" in
            "") shift 2 ;;
            *) hostfile=$2 ; shift 2 ;;
        esac ;;
        --) shift ; break ;;
        *) echo "Internal error!" >&2; exit 1 ;;
    esac
done

hostfile=$(look_for $hostfile HOST)
ensure_args 1 $#
check_existence_of $hostfile

maneuver=$(look_for $1 MNVR)


command=$terminal
for ip in `cat $hostfile`; do
	command+=$option$S
	command+="ssh -t root@$ip $( < $maneuver) "
	command+=$S
done

eval $command


